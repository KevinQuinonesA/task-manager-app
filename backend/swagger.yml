openapi: 3.0.0
info:
  title: Task Management API
  description: A RESTful API for managing tasks with authentication
  version: 1.0.0
  contact:
    name: Kevin Qui√±ones
servers:
  - url: https://n8rzweu3s6.execute-api.us-east-1.amazonaws.com/dev
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User's unique identifier
        email:
          type: string
          format: email
          description: User's email address
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
      required:
        - email

    Task:
      type: object
      properties:
        _id:
          type: string
          description: Task's unique identifier
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Detailed task description
        status:
          type: string
          enum: [todo, in_progress, done]
          description: Current status of the task
        user_id:
          type: string
          description: ID of the task owner
        created_at:
          type: string
          format: date-time
          description: Task creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Task last update timestamp
      required:
        - title
        - status

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          format: password
      required:
        - email
        - name
        - password

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        user_id:
          type: string
        name:
          type: string
        email:
          type: string
        token:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
      required:
        - message

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                message: "User registered successfully"
                user_id: "60d21b4667d0d8992e610c85"
                name: "Joe Smith"
                email: "joe@smith.com"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MGQyMWI0NjY3ZDBkODk5MmU2MTBjODUiLCJpYXQiOjE2MzQ2NTcyMDAsImV4cCI6MTYzNDc0MzYwMH0.7M0VR7bx4MO6aKZ-Yl83VfdudnIhXnC6EJ7yd3JnGnE"

        "400":
          description: Bad request (e.g. invalid email format, password too short)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Authenticate user
      description: Login with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                message: "Authentication successful"
                name: "Joe Smith"
                email: "joe@smith.com"
                user_id: "60d21b4667d0d8992e610c85"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MGQyMWI0NjY3ZDBkODk5MmU2MTBjODUiLCJpYXQiOjE2MzQ2NTcyMDAsImV4cCI6MTYzNDc0MzYwMH0.7M0VR7bx4MO6aKZ-Yl83VfdudnIhXnC6EJ7yd3JnGnE"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks:
    get:
      summary: Get all tasks
      description: Retrieve all tasks for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new task
      description: Add a new task for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Complete project documentation"
                description:
                  type: string
                  example: "Write detailed documentation for the API endpoints"
                status:
                  type: string
                  enum: [todo, in_progress, done]
                  default: todo
              required:
                - title
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Task ID

    put:
      summary: Update a task
      description: Modify an existing task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [todo, in_progress, done]
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a task
      description: Remove a task from the database
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Task deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
